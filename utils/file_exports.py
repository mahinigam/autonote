import os
import re
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

def parse_markdown_to_plain_text(markdown_text: str) -> str:
    """Convert markdown to clean plain text"""
    text = markdown_text
    
    # Remove markdown headers (# ## ###)
    text = re.sub(r'^#{1,6}\s*(.+)$', r'\1', text, flags=re.MULTILINE)
    
    # Remove bold/italic markers
    text = re.sub(r'\*\*(.+?)\*\*', r'\1', text)  # Bold
    text = re.sub(r'\*(.+?)\*', r'\1', text)      # Italic
    
    # Convert bullet points
    text = re.sub(r'^[•\-\*]\s*(.+)$', r'• \1', text, flags=re.MULTILINE)
    
    # Remove excess whitespace
    text = re.sub(r'\n\s*\n', '\n\n', text)
    text = text.strip()
    
    return text

def parse_markdown_structure(markdown_text: str) -> list:
    """Parse markdown into structured elements for formatted output"""
    lines = markdown_text.split('\n')
    elements = []
    
    for line in lines:
        line = line.strip()
        if not line:
            elements.append({'type': 'space'})
            continue
            
        # Headers
        if line.startswith('# '):
            elements.append({'type': 'h1', 'text': line[2:].strip()})
        elif line.startswith('## '):
            elements.append({'type': 'h2', 'text': line[3:].strip()})
        elif line.startswith('### '):
            elements.append({'type': 'h3', 'text': line[4:].strip()})
        # Bullet points
        elif line.startswith('• ') or line.startswith('- ') or line.startswith('* '):
            clean_text = re.sub(r'^[•\-\*]\s*', '', line)
            # Remove markdown formatting from bullet text
            clean_text = re.sub(r'\*\*(.+?)\*\*', r'\1', clean_text)  # Bold
            clean_text = re.sub(r'\*(.+?)\*', r'\1', clean_text)      # Italic
            elements.append({'type': 'bullet', 'text': clean_text})
        # Horizontal rule
        elif line.startswith('---'):
            elements.append({'type': 'hr'})
        # Regular paragraph
        else:
            # Remove markdown formatting
            clean_text = re.sub(r'\*\*(.+?)\*\*', r'\1', line)  # Bold
            clean_text = re.sub(r'\*(.+?)\*', r'\1', clean_text)      # Italic
            elements.append({'type': 'paragraph', 'text': clean_text})
    
    return elements

def save_as_txt(notes: str, file_id: str, output_dir: str) -> str:
    """Save notes as properly formatted plain text file"""
    filename = f"{file_id}.txt"
    filepath = os.path.join(output_dir, filename)
    
    os.makedirs(output_dir, exist_ok=True)
    
    # Convert markdown to clean plain text
    clean_text = parse_markdown_to_plain_text(notes)
    
    # Add header and footer
    content = "GENERATED NOTES\n"
    content += "=" * 50 + "\n\n"
    content += clean_text + "\n\n"
    content += "-" * 50 + "\n"
    content += "Generated by AutoNote\n"
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return filepath

def save_as_md(notes: str, file_id: str, output_dir: str) -> str:
    """Save notes as Markdown file"""
    filename = f"{file_id}.md"
    filepath = os.path.join(output_dir, filename)
    
    os.makedirs(output_dir, exist_ok=True)
    
    # Format as markdown with proper headers
    md_content = f"# Generated Notes\n\n{notes}\n\n---\n*Generated by autonote*"
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(md_content)
    
    return filepath

def save_as_pdf(notes: str, file_id: str, output_dir: str) -> str:
    """Save notes as properly formatted PDF file"""
    filename = f"{file_id}.pdf"
    filepath = os.path.join(output_dir, filename)
    
    os.makedirs(output_dir, exist_ok=True)
    
    # Create PDF document
    doc = SimpleDocTemplate(filepath, pagesize=letter, 
                          leftMargin=inch, rightMargin=inch, 
                          topMargin=inch, bottomMargin=inch)
    styles = getSampleStyleSheet()
    story = []
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Title'],
        fontSize=20,
        alignment=1,  # Center
        spaceAfter=20
    )
    
    h1_style = ParagraphStyle(
        'CustomH1',
        parent=styles['Heading1'],
        fontSize=16,
        spaceBefore=15,
        spaceAfter=10
    )
    
    h2_style = ParagraphStyle(
        'CustomH2',
        parent=styles['Heading2'],
        fontSize=14,
        spaceBefore=12,
        spaceAfter=8
    )
    
    bullet_style = ParagraphStyle(
        'CustomBullet',
        parent=styles['Normal'],
        fontSize=11,
        leftIndent=20,
        spaceBefore=3,
        spaceAfter=3
    )
    
    # Add main title
    story.append(Paragraph("Generated Notes", title_style))
    story.append(Spacer(1, 10))
    
    # Parse and add content
    elements = parse_markdown_structure(notes)
    
    for element in elements:
        if element['type'] == 'h1':
            story.append(Paragraph(element['text'], h1_style))
        elif element['type'] == 'h2':
            story.append(Paragraph(element['text'], h2_style))
        elif element['type'] == 'h3':
            story.append(Paragraph(element['text'], styles['Heading3']))
        elif element['type'] == 'bullet':
            story.append(Paragraph(f"• {element['text']}", bullet_style))
        elif element['type'] == 'paragraph' and element['text']:
            story.append(Paragraph(element['text'], styles['Normal']))
            story.append(Spacer(1, 6))
        elif element['type'] == 'space':
            story.append(Spacer(1, 8))
        elif element['type'] == 'hr':
            story.append(Spacer(1, 10))
    
    # Add footer
    story.append(Spacer(1, 20))
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=9,
        alignment=1  # Center
    )
    story.append(Paragraph("Generated by AutoNote", footer_style))
    
    doc.build(story)
    return filepath

def save_as_docx(notes: str, file_id: str, output_dir: str) -> str:
    """Save notes as properly formatted DOCX file"""
    filename = f"{file_id}.docx"
    filepath = os.path.join(output_dir, filename)
    
    os.makedirs(output_dir, exist_ok=True)
    
    # Create document
    doc = Document()
    
    # Add main title
    title = doc.add_heading('Generated Notes', 0)
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Parse and add content
    elements = parse_markdown_structure(notes)
    
    for element in elements:
        if element['type'] == 'h1':
            doc.add_heading(element['text'], level=1)
        elif element['type'] == 'h2':
            doc.add_heading(element['text'], level=2)
        elif element['type'] == 'h3':
            doc.add_heading(element['text'], level=3)
        elif element['type'] == 'bullet':
            # Add bullet point
            para = doc.add_paragraph()
            para.style = 'List Bullet'
            para.add_run(element['text'])
        elif element['type'] == 'paragraph' and element['text']:
            doc.add_paragraph(element['text'])
        elif element['type'] == 'space':
            doc.add_paragraph()  # Add empty line
        elif element['type'] == 'hr':
            doc.add_paragraph()  # Add space before/after
    
    # Add footer
    doc.add_paragraph()
    footer_para = doc.add_paragraph('Generated by AutoNote')
    footer_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    footer_run = footer_para.runs[0]
    footer_run.italic = True
    
    doc.save(filepath)
    return filepath
